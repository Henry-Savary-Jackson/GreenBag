unit YourProducts_u;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants,
  System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.StdCtrls, Data.Win.ADODB,
  Vcl.ExtCtrls,
  System.ImageList, DMUnit_u, Vcl.ImgList, Vcl.Imaging.pngimage,
  System.Generics.Collections, ProductItem_u;

type
  TfrmYourProducts = class(TForm)
    btnAddItem: TButton;
    flpnlProducts: TFlowPanel;
    scrbxProducts: TScrollBox;
    btnBack: TButton;
    procedure btnAddItemClick(Sender: TObject);
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
    procedure btnBackClick(Sender: TObject);
    procedure btnViewItemClick(Sender: TObject);
    procedure FormShow(Sender: TObject);
    procedure removeProcedure(itemID: string);

  private
    { Private declarations }

  public
    { Public declarations }
    items: tObjectDictionary<string, ProductItem>;
    procedure updateItemsDisplay;
  end;

var
  frmYourProducts: TfrmYourProducts;

implementation

uses
  Profile_u,
  Additem_u;

{$R *.dfm}

procedure TfrmYourProducts.btnAddItemClick(Sender: TObject);
begin
  frmYourProducts.Hide;
  datamodule1.lastForm := self;
  frmAddItem.Show;
end;

procedure TfrmYourProducts.btnBackClick(Sender: TObject);
begin
  //
  frmYourProducts.Hide;
  frmProfile.Show;
end;

procedure TfrmYourProducts.btnViewItemClick(Sender: TObject);
begin
  frmYourProducts.Hide;
  datamodule1.lastForm := self;
  frmAddItem.Show;
end;

procedure TfrmYourProducts.FormClose(Sender: TObject; var Action: TCloseAction);
begin
  try
    try
      datamodule1.CancelCart(datamodule1.CartID);

    except
      on e: exception do
      begin
        showMessage(e.Message);
      end;

    end;

  finally
    Application.Terminate;
  end;
end;

procedure TfrmYourProducts.FormShow(Sender: TObject);
begin
  updateItemsDisplay;
end;

procedure TfrmYourProducts.removeProcedure(itemID: string);
var
  itemToBeDeleted: ProductItem;
begin
  if MessageDlg('Are you sure you want to delete this item?', mtConfirmation,
    [mbYes, mbNo], 0, mbNo) = mryes then
  begin
    datamodule1.deleteItem(itemID);
    items.TryGetValue(itemID, itemToBeDeleted);
    itemToBeDeleted.Free;
  end;

end;

procedure TfrmYourProducts.updateItemsDisplay;
var
  dsResult: tADODataSet;
  currentItem: ProductItem;
begin
  if items <> nil then
  begin
    items.Free;
  end;

  items := tObjectDictionary<string,ProductItem>.Create();

  try

    dsResult := datamodule1.getProducts(datamodule1.userID);

    if dsResult.Fields.FindField('Status') <> nil then
    begin
      showMessage(dsResult['Status']);
      Exit;
    end;

    dsResult.First;

    while not dsResult.Eof do
    begin
      currentItem := ProductItem.Create(self, flpnlProducts, dsResult,
        self.removeProcedure);
      items.add(currentItem.itemID, currentItem);
      dsResult.Next;
    end;

  finally
    if Assigned(dsResult) then
      dsResult.Free;

  end;

end;

end.
