unit CheckOut_u;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants,
  System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.StdCtrls, Vcl.ComCtrls,
  Vcl.ExtCtrls,
  Vcl.Samples.Spin, Vcl.Imaging.pngimage, CartItem_u,
  System.Generics.Collections, ItemContainer_u;

type
  TfrmCheckout = class(TForm)
    btnBack: TButton;
    flpnlItems: TFlowPanel;
    btnCheckout: TButton;
    scrbxItems: TScrollBox;
    lblTotalCost: TLabel;
    lblTotalCF: TLabel;
    lblTotalEU: TLabel;
    lblTotalWU: TLabel;
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
    procedure btnBackClick(Sender: TObject);
    procedure btnCheckoutClick(Sender: TObject);
  private
    { Private declarations }
  public
    { Public declarations }
    userID: string;
    Cart: tObjectDictionary<string, integer>;
    items: tObjectList<CartItem>;
    procedure removeItem(itemID: string);
    procedure updateDisplay();
  end;

var
  frmCheckout: TfrmCheckout;

implementation

uses
  BrowseItems_u;

{$R *.dfm}

procedure TfrmCheckout.btnBackClick(Sender: TObject);
begin
  frmCheckout.Hide;
  frmBrowse.Show;
end;

procedure TfrmCheckout.btnCheckoutClick(Sender: TObject);
begin
  frmCheckout.Hide;
  frmBrowse.Cart := self.Cart;
  frmBrowse.Show;
end;

procedure TfrmCheckout.FormClose(Sender: TObject; var Action: TCloseAction);
begin
  Application.Terminate;
end;

procedure TfrmCheckout.removeItem(itemID: string);
begin
  //
  Cart.Remove(itemID);
  updateDisplay;
end;

procedure TfrmCheckout.updateDisplay;
var
  item: tPair<String, integer>;
begin
  //
  if Cart = nil then
  begin
    Exit;
  end;

  if items <> nil then
    items.Free;

  items := tObjectList<CartItem>.create();

  for item in Cart do
  begin
    items.Add(CartItem.create(self, flpnlItems, item.Key, item.Value, Cart));
  end;
end;

end.
